# Task ID: 11
# Title: Lightning.AI Studio Migration Planning and Setup
# Status: pending
# Dependencies: 1
# Priority: high
# Description: Plan and implement the migration of the evaluation framework to Lightning.AI Studios, leveraging features like isolated environments, GPU switching, and the plugin system. This includes initial Studio setup, environment configuration, and structuring components for model training and evaluation, while maintaining data preparation locally on Mac (Apple Silicon).
# Details:
Begin by reviewing Lightning.AI Studio documentation to understand its persistent cloud environment, isolated workspace capabilities, GPU management, and plugin architecture. Design a migration plan that maps components of the current evaluation framework (model training, evaluation, etc.) to a corresponding Studio workspace or plugin, while keeping data preparation local on Mac (Apple Silicon). Set up a new Studio instance, configure the environment with all necessary dependencies (ensuring compatibility with the existing Python setup from Task 1), and enable GPU switching as required. Establish isolated environments for each cloud component to ensure modularity and reproducibility. Integrate Lightning.AI plugins where beneficial, and document the Studio structure, environment variables, and resource allocation strategies. For local data preparation, ensure the setup includes the Qwen3-4B tokenizer with English-only token subset and adheres to the non-thinking mode policy. Document the interface between local data preparation and cloud-based components. Ensure the overall setup supports iterative development and easy scaling for future needs.

# Test Strategy:
Verify that the Studio instance is accessible and persistent, with all required dependencies installed and functioning. Confirm that cloud components (model training, evaluation) run in isolated environments and can access GPU resources as configured. Test the plugin system by integrating at least one relevant plugin and ensuring it operates as expected. For local data preparation, verify that the Qwen3-4B tokenizer with English-only token subset works correctly on Mac (Apple Silicon) and adheres to the non-thinking mode policy. Test the interface between local data preparation and cloud components to ensure seamless data transfer. Validate that the overall structure supports modular workflows and that documentation is clear and complete. Run end-to-end tests for each workflow to ensure successful execution and reproducibility.

# Subtasks:
## 1. Lightning.AI Studio Documentation Review and Migration Planning [pending]
### Dependencies: None
### Description: Thoroughly review Lightning.AI documentation to understand Studio capabilities and create a comprehensive migration plan for the evaluation framework.
### Details:
Review Lightning.AI documentation focusing on persistent cloud environments, isolated workspaces, GPU management, and plugin architecture. Create a detailed migration plan mapping each component of the current evaluation framework to appropriate Studio workspaces following the 'one Studio, one task' principle. Document how data preparation, model training, evaluation, and deployment components will be structured across separate Studios. Include considerations for resource allocation, environment variables, and secrets management.

## 2. Local Data Preparation Setup on Mac (Apple Silicon) [pending]
### Dependencies: 11.1
### Description: Set up and configure a local environment on Mac (Apple Silicon) for data preparation tasks with appropriate dependencies and Qwen3-4B tokenizer.
### Details:
Configure a local Python environment on Mac (Apple Silicon) dedicated to data preparation tasks. Install all necessary dependencies ensuring compatibility with Apple Silicon architecture. Set up the Qwen3-4B tokenizer with English-only token subset following the project's non-thinking mode policy. Configure appropriate local storage for datasets and processed data. Implement data processing workflows that can be executed locally. Document the local environment configuration, data processing steps, and interface specifications for transferring processed data to Lightning.AI Studios for training and evaluation.

## 3. Model Training Studio Setup with GPU Configuration [pending]
### Dependencies: 11.1
### Description: Establish a dedicated Lightning.AI Studio for model training with GPU support and appropriate resource allocation.
### Details:
Create a separate Lightning.AI Studio specifically for model training tasks. Configure GPU access and switching capabilities based on training requirements. Install all necessary training dependencies and frameworks. Set up environment variables for training parameters. Configure appropriate storage access for training data and model artifacts. Document GPU usage patterns, sleep mode settings, and cost optimization strategies.

## 4. Evaluation Framework Studio Implementation [pending]
### Dependencies: 11.1, 11.3
### Description: Develop a dedicated Lightning.AI Studio for model evaluation with appropriate metrics tracking and visualization capabilities.
### Details:
Set up a Lightning.AI Studio dedicated to model evaluation tasks. Configure the environment with necessary evaluation dependencies. Implement access to trained models from the model training Studio. Set up metrics tracking and visualization tools. Configure appropriate CPU/GPU resources based on evaluation needs. Document the evaluation workflow, environment configuration, and integration points with other Studios.

## 5. Lightning.AI Plugin Integration and Deployment Studio Setup [pending]
### Dependencies: 11.1, 11.3, 11.4
### Description: Integrate relevant Lightning.AI plugins and establish a deployment Studio for productionizing models with specific focus on Qwen3-4B requirements.
### Details:
Research and integrate beneficial Lightning.AI plugins across all Studios. Set up a dedicated deployment Studio for serving trained models, with specific configurations for Qwen3-4B. Configure deployment environment for Qwen3-4B with non-thinking mode only (ensure enable_thinking=False in all configurations). Implement proper sampling parameters (Temperature=0.6, TopP=0.95, TopK=20, MinP=0) for Qwen3-4B. Set up English-only token subset filtering in production environments. Optimize deployment for Qwen3's specific tokenizer patterns. Establish endpoints and configurations that strictly enforce non-thinking mode operation. Implement robust error handling for token filtering operations. Configure monitoring systems to track relevant metrics. Implement proper resource allocation strategies based on Qwen3-4B's requirements. Set up efficient model loading, initialization, and caching strategies. Configure scaling mechanisms based on load patterns. Document the plugin architecture, deployment workflow, and maintenance procedures with clear instructions that non-thinking mode is the only supported configuration. Ensure the setup supports iterative development and easy scaling for future needs.

## 6. Non-Thinking Mode Documentation and Compliance Verification [pending]
### Dependencies: 11.1, 11.5
### Description: Ensure all documentation, code, and configurations strictly adhere to the project policy of using only non-thinking mode for Qwen3.
### Details:
Review all documentation, code, and configurations created during the Lightning.AI Studio migration to ensure strict compliance with the project policy of using only non-thinking mode (enable_thinking=False) for Qwen3. Remove or refactor any references to thinking mode or <think> blocks in all materials. Create clear documentation that explicitly states non-thinking mode is the only supported configuration. Implement verification checks in deployment scripts to prevent accidental enabling of thinking mode. Add configuration validation steps to CI/CD pipelines to enforce this policy. Create a compliance checklist for team members to verify adherence to this policy during development and deployment.

## 7. Data Transfer Interface Between Local Environment and Lightning.AI Studios [pending]
### Dependencies: 11.2, 11.3
### Description: Develop and document a robust interface for transferring processed data from the local Mac environment to Lightning.AI Studios.
### Details:
Design and implement a reliable mechanism for transferring processed data from the local Mac (Apple Silicon) environment to Lightning.AI Studios for training and evaluation. Consider options such as cloud storage integration (S3, GCS), direct API uploads, or other appropriate transfer methods. Ensure the interface handles large datasets efficiently and maintains data integrity. Implement appropriate authentication and security measures. Create automation scripts to streamline the transfer process. Document the complete data flow from local processing to cloud usage, including file formats, directory structures, and versioning strategies.

## 8. Optional: Data Preparation Studio Setup for Future Migration [pending]
### Dependencies: 11.1, 11.2
### Description: Create a plan for future migration of data preparation tasks from local environment to Lightning.AI Studio when needed.
### Details:
Develop a detailed plan for future migration of data preparation tasks from the local Mac environment to Lightning.AI Studio when needed. Document the current local data preparation workflow in detail to facilitate future migration. Identify potential challenges in migrating from Apple Silicon to cloud environment, particularly regarding the Qwen3-4B tokenizer and English-only token subset. Create a checklist of requirements and configurations needed for a successful migration. Outline a testing strategy to ensure equivalent results between local and cloud-based data preparation. Document this as an optional future task that can be implemented when scaling requirements exceed local capabilities.

