---
description:
globs:
alwaysApply: false
---
# Python Script Development Guidelines

## **Core Principles**

- **Single Responsibility**: Each script should have a clear, focused purpose
  - One main functionality per file
  - Clear separation of concerns
  - Modular design for reusability
  - Well-defined interfaces

- **Command-line Interface First**
  - All scripts should have CLI support
  - Use argparse for argument handling
  - Provide help documentation
  - Support configuration files

- **Reproducibility**
  - Deterministic execution
  - Environment independence
  - Clear dependency management
  - Proper error handling

## **Script Structure**

### Required Components

1. **Module Docstring**
   ```python
   """
   Module Name: script_name.py

   Description: Brief description of the script's purpose

   Author: Your Name
   Date: YYYY-MM-DD
   """
   ```

2. **Imports Section**
   ```python
   # Standard library imports
   import os
   import sys
   import argparse

   # Third-party imports
   import numpy as np
   import pandas as pd

   # Local imports
   from src.utils import helpers
   ```

3. **Configuration**
   ```python
   # Constants and configuration
   DEFAULT_BATCH_SIZE = 32
   CONFIG_PATH = "configs/default.yaml"
   ```

4. **Function Definitions**
   ```python
   def main():
       """Main execution function."""
       args = parse_args()
       # Main logic here

   def parse_args():
       """Parse command line arguments."""
       parser = argparse.ArgumentParser()
       # Add arguments
       return parser.parse_args()
   ```

5. **Main Guard**
   ```python
   if __name__ == "__main__":
       main()
   ```

### Directory Structure

```
src/
  ├── analysis/          # Analysis scripts
  │   ├── __init__.py
  │   └── metrics.py
  ├── data/             # Data processing
  │   ├── __init__.py
  │   └── loader.py
  ├── models/           # Model definitions
  │   ├── __init__.py
  │   └── architecture.py
  ├── training/         # Training scripts
  │   ├── __init__.py
  │   └── train.py
  ├── evaluation/       # Evaluation scripts
  │   ├── __init__.py
  │   └── evaluate.py
  └── utils/            # Shared utilities
      ├── __init__.py
      └── helpers.py
```

## **Best Practices**

### Code Organization

- Group related functions together
- Use classes for complex state management
- Keep functions focused and small
- Document complex algorithms

### Error Handling

```python
def process_data(filepath):
    """Process data from file with proper error handling."""
    try:
        with open(filepath) as f:
            data = f.read()
    except FileNotFoundError:
        logger.error(f"File not found: {filepath}")
        raise
    except Exception as e:
        logger.error(f"Error processing {filepath}: {e}")
        raise
```

### Logging

```python
import logging

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)
```

### Configuration Management

```python
import yaml

def load_config(config_path):
    """Load configuration from YAML file."""
    with open(config_path) as f:
        return yaml.safe_load(f)
```

### Output Management

- Save results to structured directories
- Use timestamps in filenames
- Create HTML reports for analysis
- Generate visualizations as static files

## **Documentation Requirements**

1. **Function Documentation**
   ```python
   def process_batch(data, batch_size=32):
       """
       Process data in batches.

       Args:
           data (np.ndarray): Input data array
           batch_size (int): Size of each batch

       Returns:
           list: Processed batches

       Raises:
           ValueError: If batch_size > len(data)
       """
   ```

2. **Module-level Documentation**
   - Purpose and functionality
   - Usage examples
   - Dependencies
   - Configuration options

3. **README Files**
   - One per directory
   - Explains directory contents
   - Usage instructions
   - Examples

## **Testing Guidelines**

1. **Test Files**
   - Mirror the source structure
   - Name as `test_*.py`
   - Use pytest fixtures

2. **Test Coverage**
   - Core functionality
   - Edge cases
   - Error conditions
   - CLI arguments

## **Visualization and Reporting**

1. **Generate Static Files**
   ```python
   import matplotlib.pyplot as plt

   def save_plot(data, filepath):
       plt.figure()
       plt.plot(data)
       plt.savefig(filepath)
       plt.close()
   ```

2. **HTML Reports**
   ```python
   def generate_report(results, template_path, output_path):
       """Generate HTML report from results."""
       with open(template_path) as f:
           template = f.read()

       report = template.format(**results)

       with open(output_path, 'w') as f:
           f.write(report)
   ```

## **Version Control**

1. **Git Ignore**
   - `__pycache__/`
   - `*.pyc`
   - `results/`
   - `logs/`

2. **Commit Messages**
   ```
   feat(module): Add new analysis feature

   - Implement data processing
   - Add visualization
   - Update documentation
   ```

## **Dependencies**

1. **Requirements File**
   ```
   # requirements.txt
   numpy>=1.20.0
   pandas>=1.3.0
   matplotlib>=3.4.0
   ```

2. **Virtual Environment**
   ```bash
   python -m venv .venv
   source .venv/bin/activate
   pip install -r requirements.txt
   ```
